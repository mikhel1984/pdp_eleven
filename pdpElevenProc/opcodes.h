#ifndef OPCODES_H
#define OPCODES_H

#include <stdint.h>

#define MSK_1    07
#define MSK_3    0700
#define MSK_12   077
#define MSK_34   07700
#define MSK_BYTE 0377

struct Opcodes {
    uint16_t base;
    uint16_t src_mask;
    uint16_t dst_mask;
    uint16_t offset_mask;
    uint16_t isbyte;
    const char *name;
} opcodes[] =
{

{0, 0, 0, 0, 0, "HALT"},
{01, 0, 0, 0, 0,  "WAIT"},
{02, 0, 0, 0, 0, "RTI"},
{03, 0, 0, 0, 0, "BPT"},
{04, 0, 0, 0, 0, "IOT"},
{05, 0, 0, 0, 0, "RESET"},
{06, 0, 0, 0, 0, "RTT"},

{0100, 0, MSK_12, 0, 0, "JMP"},
{0200, 0, MSK_1, 0, 0, "RTS"},
{0240, MSK_1, 0, 0, 0, "CLC"},
{0260, MSK_1, 0, 0, 0, "SEC"},
{0300, 0, MSK_12, 0, 0, "SWAB"},
{0400, 0, 0, MSK_BYTE, 0, "BR"},

{01000, 0, 0, MSK_BYTE, 0, "BNE"},
{01400, 0, 0, MSK_BYTE, 0, "BEQ"},
{02000, 0, 0, MSK_BYTE, 0, "BGE"},
{02400, 0, 0, MSK_BYTE, 0, "BLT"},
{03000, 0, 0, MSK_BYTE, 0, "BGT"},
{03400, 0, 0, MSK_BYTE, 0, "BLE"},
{04000, MSK_3, MSK_12, 0, 0, "JSR"},
{05000, 0, MSK_12, 0, 0, "CLR"},
{05100, 0, MSK_12, 0, 0, "COM"},
{05200, 0, MSK_12, 0, 0, "INC"},
{05300, 0, MSK_12, 0, 0, "DEC"},
{05400, 0, MSK_12, 0, 0, "NEG"},
{05500, 0, MSK_12, 0, 0, "ADC"},
{05600, 0, MSK_12, 0, 0, "SBC"},
{05700, 0, MSK_12, 0, 0, "TST"},
{06000, 0, MSK_12, 0, 0, "ROR"},
{06100, 0, MSK_12, 0, 0, "ROL"},
{06200, 0, MSK_12, 0, 0, "ASR"},
{06300, 0, MSK_12, 0, 0, "ASL"},
{06400, 0, MSK_12, 0, 0, "MARK"},
{06500, MSK_12, 0, 0, 0, "MFPI"},
{06600, 0, MSK_12, 0, 0, "MTPI"},
{06700, 0, MSK_12, 0, 0, "SXT"},

{010000, MSK_34, MSK_12, 0, 0, "MOV"},
{020000, MSK_34, MSK_12, 0, 0, "CMP"},
{030000, MSK_34, MSK_12, 0, 0, "BIT"},
{040000, MSK_34, MSK_12, 0, 0, "BIC"},
{050000, MSK_34, MSK_12, 0, 0, "BIS"},
{060000, MSK_34, MSK_12, 0, 0, "ADD"},
{070000, MSK_12, MSK_3, 0, 0, "MUL"},
{071000, MSK_12, MSK_3, 0, 0, "DIV"},
{072000, MSK_12, MSK_3, 0, 0, "ASH"},
{073000, MSK_12, MSK_3, 0, 0, "ASHC"},
{074000, MSK_3, MSK_12, 0, 0, "XOR"},
{077000, 0, MSK_3, MSK_12, 0, "SOB"},

{0100000, 0, 0, MSK_BYTE, 0, "BPL"},
{0100400, 0, 0, MSK_BYTE, 0, "BMI"},
{0101000, 0, 0, MSK_BYTE, 0, "BHI"},
{0101400, 0, 0, MSK_BYTE, 0, "BLOS"},
{0102000, 0, 0, MSK_BYTE, 0, "BVC"},
{0102400, 0, 0, MSK_BYTE, 0, "BVS"},
{0103000, 0, 0, MSK_BYTE, 0, "BCC"},
{0103400, 0, 0, MSK_BYTE, 0, "BCS"},
{0104000, 0, MSK_BYTE, 0, 0, "EMT"},
{0104400, 0, MSK_BYTE, 0, 0, "TRAP"},
{0105000, 0, MSK_12, 0, 1, "CLRB"},
{0105100, 0, MSK_12, 0, 1, "COMB"},
{0105200, 0, MSK_12, 0, 1, "INCB"},
{0105300, 0, MSK_12, 0, 1, "DECB"},
{0105400, 0, MSK_12, 0, 1, "NEGB"},
{0105500, 0, MSK_12, 0, 1, "ADCB"},
{0105600, 0, MSK_12, 0, 1, "SBCB"},
{0105700, 0, MSK_12, 0, 1, "TSTB"},
{0106000, 0, MSK_12, 0, 1, "RORB"},
{0106100, 0, MSK_12, 0, 1, "ROLB"},
{0106200, 0, MSK_12, 0, 1, "ASRB"},
{0106300, 0, MSK_12, 0, 1, "ASLB"},
{0110000, MSK_34, MSK_12, 0, 1, "MOVB"},
{0120000, MSK_34, MSK_12, 0, 1, "CMPB"},
{0130000, MSK_34, MSK_12, 0, 1, "BITB"},
{0140000, MSK_34, MSK_12, 0, 1, "BICB"},
{0150000, MSK_34, MSK_12, 0, 1, "BISB"},
{0160000, MSK_34, MSK_12, 0, 0,"SUB"},
};

typedef enum _OPCODELIST {
    OP_HALT,
    OP_WAIT,
    OP_RTI,
    OP_BPI,
    OP_IOT,
    OP_RESET,
    OP_RTT,
    OP_JMP,
    OP_RTS,
    OP_CLC,
    OP_SEC,
    OP_SWAB,
    OP_BR,
    OP_BNE,
    OP_BEQ,
    OP_BGE,
    OP_BLT,
    OP_BGT,
    OP_BLE,
    OP_JSR,
    OP_CLR,
    OP_COM,
    OP_INC,
    OP_DEC,
    OP_NEG,
    OP_ADC,
    OP_SBC,
    OP_TST,
    OP_ROR,
    OP_ROL,
    OP_ASR,
    OP_ASL,
    OP_MARK,
    OP_MFPI,
    OP_MTPI,
    OP_SXT,
    OP_MOV,
    OP_CMP,
    OP_BIT,
    OP_BIC,
    OP_BIS,
    OP_ADD,
    OP_MUL,
    OP_DIV,
    OP_ASH,
    OP_ASHC,
    OP_XOR,
    OP_SOB,
    OP_BPL,
    OP_BMI,
    OP_BHI,
    OP_BLOS,
    OP_BVC,
    OP_BVS,
    OP_BCC,
    OP_BCS,
    OP_EMT,
    OP_TRAP,
    OP_CLRB,
    OP_COMB,
    OP_INCB,
    OP_DECB,
    OP_NEGB,
    OP_ADCB,
    OP_SBCB,
    OP_TSTB,
    OP_RORB,
    OP_ROLB,
    OP_ASRB,
    OP_ASLB,
    OP_MOVB,
    OP_CMPB,
    OP_BITB,
    OP_BICB,
    OP_BISB,
    OP_SUB,
    OP_COUNT
} OPCODELIST;


#endif // OPCODES_H
